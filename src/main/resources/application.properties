# Application port
server.port=5001

# Existing APIs URLs
api.product.similarids.url=http://localhost:3001/product/{productId}/similarids
api.product.detail.url=http://localhost:3001/product/{productId}

# WebClient configuration
spring.codec.max-in-memory-size=10MB
webclient.max-connections=1000
webclient.acquisition-timeout=1500
webclient.max-idle-time=15000
webclient.evict-interval=2000
webclient.connect-timeout=1000
webclient.response-timeout=2000
webclient.read-timeout=2000
webclient.write-timeout=2000
webclient.max-memory-size=16777216
webclient.connection-provider-name=optimized-conn-pool
webclient.event-loop-name=webclient-event-loop
webclient.product-path-indicator=product
webclient.timeout-multiplier=2

# Advanced Netty configuration
webclient.netty.selector-threads=2
webclient.netty.worker-threads=8
reactor.netty.ioWorkerCount=8
reactor.netty.pool.leasingStrategy=lifo
spring.application.netty.connection.provider.max-life-time=30000

# Netty server configuration
server.netty.connection.backlog=8192
server.netty.connection.timeout=15000
server.netty.worker.count=16
server.netty.boss.count=4

# Reactor configuration
reactor.schedulers.defaultBoundedElasticSize=200
reactor.schedulers.defaultBoundedElasticQueueSize=200000
service.parallel-rails=4

# JVM optimizations
spring.jvm.gc.overhead=5
spring.jvm.heap.size=512m

# Cache configuration
cache.expiration=600
cache.maximum-size=25000
cache.duration.minutes=10
cache.duration.short-ms=500
cache.short-expiration=60
cache.short-maximum-size=1000
cache.initial-capacity=1000
spring.cache.caffeine.spec=maximumSize=25000,expireAfterWrite=600s,recordStats=true

# Cache names
cache.name.similar-products=similarProducts
cache.name.product-details=productDetails
cache.name.similar-ids=similarIds
cache.name.product-detail-optimized=productDetailOptimized
cache.name.short-lived=shortLivedCache

# Circuit breaker configuration
resilience4j.circuitbreaker.instances.productApi.sliding-window-size=20
resilience4j.circuitbreaker.instances.productApi.permitted-number-of-calls-in-half-open-state=5
resilience4j.circuitbreaker.instances.productApi.wait-duration-in-open-state=2000ms
resilience4j.circuitbreaker.instances.productApi.failure-rate-threshold=40
resilience4j.circuitbreaker.instances.productApi.register-health-indicator=true
resilience4j.circuitbreaker.instances.productApi.allow-health-indicator-to-fail=true
resilience4j.circuitbreaker.instances.productApi.automatic-transition-from-open-to-half-open-enabled=true
circuit-breaker.name.product-api=productApi

# Resilience4j
resilience4j.retry.instances.productApi.max-attempts=2
resilience4j.retry.instances.productApi.wait-duration=500ms
resilience4j.retry.instances.productApi.retry-exceptions=java.io.IOException,java.util.concurrent.TimeoutException

# Timeout configurations
spring.mvc.async.request-timeout=15000ms

# Monitoring configurations
management.endpoints.web.exposure.include=health,info,metrics,prometheus,circuitbreakers
management.prometheus.metrics.export.enabled=true
management.endpoint.health.show-details=always
management.health.circuitbreakers.enabled=true

# Log messages
log.message.product-not-found=Product not found: {}
log.message.similar-products-debug=Getting similar products for product: {}
log.message.similar-ids-debug=Getting similar product IDs for product: {}
log.message.product-detail-debug=Getting product detail for product: {}
log.message.error-similar-ids=Error fetching similar product IDs: {}
log.message.error-product-detail=Error fetching product detail: {}
log.message.warn-not-found=Main product {} not found, returning empty list for similar products.
log.message.warn-circuit-breaker=Circuit breaker or retry triggered for {}: {}
log.message.warn-timeout=Timeout getting similar product detail: {}
log.message.warn-similar-not-found=Similar product detail not found: {}
log.message.error-similar-detail=Error fetching similar product detail for {}: {}
log.message.debug-no-similar=No similar product IDs found for {}
log.message.debug-retrieved=Retrieved {} similar products for {}
log.message.warn-error-retrieve=Error retrieving similar products for {}: {}. Returning empty list.
log.message.warn-error-exists=Error checking if product {} exists: {}

# GlobalExceptionHandler messages
log.message.error-not-found=Product not found error: {}
log.message.error-timeout=Timeout error: {}
log.message.error-unexpected=Unexpected error: {}

# Response constants
response.key.scan-available=scanAvailable
response.value.scan-available=true

# Controller messages
log.message.controller-similar-request=Request received for similar products of: {}
